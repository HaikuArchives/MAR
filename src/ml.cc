/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header$
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <iostream>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int MarLexer::yylex()


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 84
#define YY_END_OF_BUFFER 85
static yyconst short int yy_accept[326] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   85,   80,   52,   52,
       80,    7,    1,    7,    6,    7,    7,    7,    7,    9,
        9,    9,    9,   13,   13,   13,   13,   13,   39,   14,
       14,   37,   39,   38,   41,   41,   42,   43,   46,   44,
       44,   47,   51,   51,   50,   51,   51,   51,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   36,   37,    0,   38,   41,    0,   46,    0,
        0,   49,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    4,    0,    0,    0,    8,    0,
        0,    0,   36,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   48,   79,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   63,
        0,   66,    0,   68,    0,    0,    0,    0,    0,    2,
        5,    3,    0,    0,   10,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   81,   53,    0,    0,    0,    0,    0,    0,
       59,    0,    0,   62,    0,   67,   70,    0,    0,   73,

        0,    0,   11,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   69,    0,   55,   58,   57,   56,    0,    0,    0,
       65,   71,    0,    0,    0,    0,   77,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   23,    0,    0,
       27,    0,    0,    0,    0,    0,   45,    0,    0,   54,
       82,    0,    0,    0,   72,   76,   75,   74,   12,    0,
        0,    0,    0,    0,    0,   20,    0,   22,    0,   26,
       29,    0,   31,    0,    0,    0,    0,    0,    0,    0,
       60,    0,   64,   28,    0,   16,   19,   18,   17,    0,

       25,    0,   30,    0,    0,    0,   35,    0,   83,    0,
        0,   15,    0,    0,   34,   33,   32,   40,   78,   61,
        0,   24,    0,   21,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    6,    7,    8,    9,   10,   11,
       12,   13,    9,   14,    9,   15,    9,    1,    1,   16,
       17,   18,   19,    1,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
        1,    1,    1,    1,    1,    1,   21,   22,   23,   24,

       25,   26,   27,   28,   29,   20,   20,   30,   31,   32,
       33,   34,   20,   35,   36,   37,   38,   20,   39,   40,
       41,   42,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[43] =
    {   0,
        1,    2,    3,    1,    1,    1,    4,    1,    5,    5,
        5,    5,    5,    5,    5,    3,    1,    1,    1,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6
    } ;

static yyconst short int yy_base[339] =
    {   0,
        0,    2,   17,   55,    5,    7,   10,   25,   94,    0,
       27,   29,   36,   58,   61,   63,  442,  443,  443,  443,
      133,  443,  443,    0,  443,  420,  405,  398,  410,  443,
      443,    0,  432,  443,  443,  428,  414,  399,  443,  443,
      443,  426,  424,    0,    0,    0,  443,  423,    0,  443,
      443,  422,  443,  443,  443,  423,    0,  410,  421,   45,
      386,  392,  391,  390,  392,  389,  387,   15,  393,  385,
       21,   49,  388,  387,  384,  391,  379,  391,   12,   59,
      381,  372,    0,  402,  149,    0,    0,  108,    0,   53,
      390,  443,  401,  373,  380,  373,  370,  372,  363,  367,

      362,  375,  361,  365,  369,  365,  354,   11,  350,  362,
      355,  358,  356,  362,  443,  361,  348,   45,  443,  351,
      347,  357,    0,  348,  347,  349,  346,   30,  351,  343,
      350,  111,  345,  344,  335,  350,  443,  443,  347,  333,
      338,  337,  333,  343,  343,  136,  342,  326,  336,  443,
      328,  443,  322,  443,  333,  315,  327,  330,  317,  443,
      443,  443,  320,  327,  443,  321,  312,  316,  311,  311,
      315,  319,  315,  119,  301,  313,  310,  308,  304,  299,
      316,  300,  443,  443,  300,  304,  296,  318,  320,  317,
      443,  299,   47,  443,  291,  443,  443,  302,  294,  443,

      178,  295,  443,  291,  301,  301,  184,  285,  295,  301,
      286,  280,  298,  290,  272,  288,  275,  282,  292,  279,
      287,  443,  282,  443,  443,  443,  443,  281,  278,  272,
      278,  443,  275,  287,  289,  286,  443,  280,  262,  266,
      258,  280,  282,  279,  273,  128,  272,  443,  252,  270,
      443,  269,  261,  267,  190,  252,  443,  258,  255,  443,
      443,  256,  253,  244,  443,  443,  443,  443,  443,  260,
      252,  258,  257,  256,  255,  443,  240,  443,  136,  443,
      443,  253,  443,  256,  249,  246,  236,  176,  183,  172,
      443,  170,  443,  443,  173,  443,  443,  443,  443,  162,

      443,  146,  443,  159,  158,  156,  443,  147,  443,  142,
      123,  443,  118,   75,  443,  443,  443,  443,  443,  443,
       35,  443,    7,  443,  443,  205,  211,  217,  223,  229,
      235,  241,  244,  245,  251,  257,  263,    1
    } ;

static yyconst short int yy_def[339] =
    {   0,
      326,  326,  327,  327,  328,  328,  329,  329,  325,    9,
      330,  330,  331,  331,  332,  332,  325,  325,  325,  325,
      325,  325,  325,   21,  325,  325,  325,  325,  325,  325,
      325,   21,  325,  325,  325,   21,  325,  325,  325,  325,
      325,  333,   21,  334,  335,  335,  325,   21,  336,  325,
      325,   21,  325,  325,  325,  325,   21,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  337,  325,
      325,  325,  338,  333,  325,  334,  335,  325,  336,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,

      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  337,  325,  325,
      325,  325,  338,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,

      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,

      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,    0,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325
    } ;

static yyconst short int yy_nxt[486] =
    {   0,
      325,   19,   20,   19,   20,  123,   31,   20,   31,   20,
      325,   35,   20,  325,  119,   21,  119,   21,   23,   20,
       32,   33,   32,   33,  324,   36,   35,   20,   46,   47,
       46,   47,   24,  153,   25,   37,  154,   50,   51,  103,
       36,  107,   48,  104,   48,  108,   38,  119,   26,  119,
       37,   52,   27,   28,  170,   29,   23,   20,  171,   50,
       51,   38,   54,   55,   54,   55,   56,  229,   56,  323,
       24,  230,   25,   52,   94,   95,   57,  109,   57,   58,
      120,   58,   94,   95,  110,  111,   26,  136,   94,   95,
       27,   28,  322,   29,   39,   40,   41,   39,   39,   39,

       39,   39,   42,   42,   42,   42,   42,   42,   42,   43,
       39,   39,   39,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   59,   94,   95,  175,
       60,  212,  321,  135,  213,  188,  176,  189,  259,  190,
      191,   61,  277,  301,   62,   63,   64,  320,   65,  319,
      302,   66,   67,   68,  318,   69,   70,   71,   72,   73,
       74,  124,  125,  317,  126,  316,  315,  127,   94,  128,
      314,  129,  130,  131,  132,  133,  134,  234,  313,  235,
      312,  236,  237,  242,  311,  243,  310,  244,  245,  284,

      309,  285,  308,  286,  287,   18,   18,   18,   18,   18,
       18,   22,   22,   22,   22,   22,   22,   30,   30,   30,
       30,   30,   30,   34,   34,   34,   34,   34,   34,   45,
       45,   45,   45,   45,   45,   49,   49,   49,   49,   49,
       49,   53,   53,   53,   53,   53,   53,   84,   84,   86,
       86,   87,   87,  307,   87,   87,   87,   89,  306,  305,
       89,   89,   89,  118,  118,  118,  118,  118,  118,  304,
      303,  300,  299,  298,  297,  296,  295,  294,  293,  292,
      291,  290,  289,  288,  283,  282,  281,  280,  279,  278,
      276,  275,  274,  273,  272,  271,  270,  269,  268,  267,

      266,  265,  264,  263,  262,  261,  260,  259,  258,  257,
      256,  255,  254,  253,  252,  251,  250,  249,  248,  247,
      246,  241,  240,  239,  238,  233,  232,  231,  228,  227,
      226,  225,  224,  223,  222,  221,  220,  219,  218,  217,
      216,  215,  214,  211,  210,  209,  208,  207,  206,  205,
      204,  203,  202,  201,  200,  199,  198,  197,  196,  195,
      194,  193,  192,  187,  186,  185,  184,  183,  182,  181,
      180,  179,  178,  177,  174,  173,  172,  169,  168,  167,
      166,  165,  164,  163,  162,  161,  160,  159,  158,  157,
      156,  155,  152,  151,  150,  149,  148,  147,  146,  145,

      144,  143,  142,  141,  140,  139,  138,  137,   83,  122,
      121,  117,  116,  115,  114,  113,  112,  106,  105,  102,
      101,  100,   99,   98,   97,   96,   93,   92,   91,   90,
       88,   85,   83,   82,   81,   80,   79,   78,   77,   76,
       75,  325,   17,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325
    } ;

static yyconst short int yy_chk[486] =
    {   0,
        0,    1,    1,    2,    2,  338,    5,    5,    6,    6,
        0,    7,    7,    0,   79,    1,   79,    2,    3,    3,
        5,    5,    6,    6,  323,    7,    8,    8,   11,   11,
       12,   12,    3,  108,    3,    7,  108,   13,   13,   68,
        8,   71,   11,   68,   12,   71,    7,  118,    3,  118,
        8,   13,    3,    3,  128,    3,    4,    4,  128,   14,
       14,    8,   15,   15,   16,   16,   15,  193,   16,  321,
        4,  193,    4,   14,   60,   60,   15,   72,   16,   15,
       80,   16,   90,   90,   72,   72,    4,   90,   80,   80,
        4,    4,  314,    4,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   21,   88,   88,  132,
       21,  174,  313,   88,  174,  146,  132,  146,  246,  146,
      146,   21,  246,  279,   21,   21,   21,  311,   21,  310,
      279,   21,   21,   21,  308,   21,   21,   21,   21,   21,
       21,   85,   85,  306,   85,  305,  304,   85,   85,   85,
      302,   85,   85,   85,   85,   85,   85,  201,  300,  201,
      295,  201,  201,  207,  292,  207,  290,  207,  207,  255,

      289,  255,  288,  255,  255,  326,  326,  326,  326,  326,
      326,  327,  327,  327,  327,  327,  327,  328,  328,  328,
      328,  328,  328,  329,  329,  329,  329,  329,  329,  330,
      330,  330,  330,  330,  330,  331,  331,  331,  331,  331,
      331,  332,  332,  332,  332,  332,  332,  333,  333,  334,
      334,  335,  335,  287,  335,  335,  335,  336,  286,  285,
      336,  336,  336,  337,  337,  337,  337,  337,  337,  284,
      282,  277,  275,  274,  273,  272,  271,  270,  264,  263,
      262,  259,  258,  256,  254,  253,  252,  250,  249,  247,
      245,  244,  243,  242,  241,  240,  239,  238,  236,  235,

      234,  233,  231,  230,  229,  228,  223,  221,  220,  219,
      218,  217,  216,  215,  214,  213,  212,  211,  210,  209,
      208,  206,  205,  204,  202,  199,  198,  195,  192,  190,
      189,  188,  187,  186,  185,  182,  181,  180,  179,  178,
      177,  176,  175,  173,  172,  171,  170,  169,  168,  167,
      166,  164,  163,  159,  158,  157,  156,  155,  153,  151,
      149,  148,  147,  145,  144,  143,  142,  141,  140,  139,
      136,  135,  134,  133,  131,  130,  129,  127,  126,  125,
      124,  122,  121,  120,  117,  116,  114,  113,  112,  111,
      110,  109,  107,  106,  105,  104,  103,  102,  101,  100,

       99,   98,   97,   96,   95,   94,   93,   91,   84,   82,
       81,   78,   77,   76,   75,   74,   73,   70,   69,   67,
       66,   65,   64,   63,   62,   61,   59,   58,   56,   52,
       48,   43,   42,   38,   37,   36,   33,   29,   28,   27,
       26,   17,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325,  325,  325,  325,  325,  325,
      325,  325,  325,  325,  325
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ml.l"
#define INITIAL 0
#line 2 "ml.l"

#undef YY_DECL
#define YY_DECL							int MarLexer::Lex (void *arg, void *marc)
#define YY_SKIP_YYWRAP
#define yywrap								(dynamic_cast<MarLexer *>(this))->Wrapper

/* Parses semi-xml for BMessages */

#include <stdio.h>
#include <string.h>

#include "marlex.h"
#include "minfo.h"
#include "my.tab.h"
#include "marcontrol.h"

#define ATTRIBUTE 1

#define VALUE 2

#define BOOL 3

#define SIMPLE 4

#define STRBODY 5

#define RAWBODY 6

#define COMMENT 7


/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 36 "ml.l"




MarControl *control ((MarControl *)marc);
YYSTYPE *yylval ((YYSTYPE *)arg);




	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 326 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 443 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 45 "ml.l"
;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "ml.l"
{ BEGIN VALUE; return NAME_ATTR; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 47 "ml.l"
{ BEGIN VALUE; return WHAT_ATTR; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 48 "ml.l"
{ BEGIN VALUE; return SRC_ATTR; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 49 "ml.l"
{ BEGIN VALUE; return TYPE_ATTR; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 50 "ml.l"
{
															switch (type_state)
															{
																case BOOL_TAG:
																	BEGIN BOOL;
																	break;

																case DOUBLE_TAG:
																case FLOAT_TAG:
																case INT64_TAG:
																case INT32_TAG:
																case INT16_TAG:
																case INT8_TAG:
																case MESSENGER_TAG:
																case MIME_TAG:
																case OFF_TAG:
																case POINTER_TAG:
																case POINT_TAG:
																case RECT_TAG:
																case REF_TAG:
																case COLOR_TAG:
																case SIZE_TAG:
																case SSIZE_TAG:
																case TIME_TAG:
																case UINT64_TAG:
																case UINT32_TAG:
																case UINT16_TAG:
																case UINT8_TAG:
																	BEGIN SIMPLE;
																	break;

																case RAW_TAG:
																	BEGIN RAWBODY;
																	break;

																case STRING_TAG:
																	BEGIN STRBODY;
																	break;

																case MESSAGE_TAG:
																	BEGIN INITIAL;
																	break;
															}
															return yytext[0];
														}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 95 "ml.l"
{ return yytext[0]; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 97 "ml.l"
{
															int len;

															BEGIN ATTRIBUTE;

															len = strlen (yylval->string = strdup (yytext + 2));
															if (yylval->string[len - 1] != '\"')
																fprintf (stderr, "Unterminated attribute value %s\n", yytext);

															if (yylval->string[len - 1] == '\"'
															||  yylval->string[len - 1] == '\n')
																yylval->string[len - 1] = '\0';

															return VALUE_ATTR;
														}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 112 "ml.l"
{ fprintf (stderr, "Missing attribute assignment %c\n", yytext[0]); return -1; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 114 "ml.l"
{ return TRUE_DATA; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 115 "ml.l"
{ return FALSE_DATA; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 116 "ml.l"
{ BEGIN INITIAL; return BOOL_END; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 117 "ml.l"
{ BEGIN INITIAL; return yytext[0]; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 119 "ml.l"
;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 120 "ml.l"
{ BEGIN INITIAL; return DOUBLE_END; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 121 "ml.l"
{ BEGIN INITIAL; return FLOAT_END; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 122 "ml.l"
{ BEGIN INITIAL; return INT64_END; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 123 "ml.l"
{ BEGIN INITIAL; return INT32_END; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 124 "ml.l"
{ BEGIN INITIAL; return INT16_END; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 125 "ml.l"
{ BEGIN INITIAL; return INT8_END; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 126 "ml.l"
{ BEGIN INITIAL; return MESSENGER_END; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 127 "ml.l"
{ BEGIN INITIAL; return MIME_END; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 128 "ml.l"
{ BEGIN INITIAL; return OFF_END; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 129 "ml.l"
{ BEGIN INITIAL; return POINTER_END; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 130 "ml.l"
{ BEGIN INITIAL; return POINT_END; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 131 "ml.l"
{ BEGIN INITIAL; return RECT_END; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 132 "ml.l"
{ BEGIN INITIAL; return REF_END; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 133 "ml.l"
{ BEGIN INITIAL; return COLOR_END; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 134 "ml.l"
{ BEGIN INITIAL; return SIZE_END; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 135 "ml.l"
{ BEGIN INITIAL; return SSIZE_END; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 136 "ml.l"
{ BEGIN INITIAL; return TIME_END; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 137 "ml.l"
{ BEGIN INITIAL; return UINT64_END; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 138 "ml.l"
{ BEGIN INITIAL; return UINT32_END; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 139 "ml.l"
{ BEGIN INITIAL; return UINT16_END; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 140 "ml.l"
{ BEGIN INITIAL; return UINT8_END; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 142 "ml.l"
{ yylval->decimal = atof (yytext); return DECIMAL; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 143 "ml.l"
{ yylval->integer = strtoll (yytext, 0, 10); return INTEGER; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 144 "ml.l"
{ yylval->string  = strdup (yytext); return WORD; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 145 "ml.l"
{ return yytext[0]; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 147 "ml.l"
{ BEGIN INITIAL; return STRING_END; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 148 "ml.l"
{ yylval->string = strdup (yytext); return LINE; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 149 "ml.l"
{ return yytext[0]; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 150 "ml.l"
{ return yytext[0]; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 152 "ml.l"
;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 153 "ml.l"
{ BEGIN INITIAL; return RAW_END; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 154 "ml.l"
{ yylval->string = strdup (yytext); return LINE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 155 "ml.l"
{ return yytext[0]; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 157 "ml.l"
{ BEGIN INITIAL; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 158 "ml.l"
{ BEGIN INITIAL; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 159 "ml.l"
;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 160 "ml.l"
;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 162 "ml.l"
;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 163 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = BOOL_TAG; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 164 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = DOUBLE_TAG; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 165 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = FLOAT_TAG; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 166 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = INT64_TAG; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 167 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = INT32_TAG; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 168 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = INT16_TAG; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 169 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = INT8_TAG; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 170 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = MESSAGE_TAG; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 171 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = MESSENGER_TAG; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 172 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = MIME_TAG; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 173 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = OFF_TAG; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 174 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = POINTER_TAG; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 175 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = POINT_TAG; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 176 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = RAW_TAG; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 177 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = RECT_TAG; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 178 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = REF_TAG; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 179 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = COLOR_TAG; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 180 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = SIZE_TAG; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 181 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = SSIZE_TAG; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 182 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = STRING_TAG; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 183 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = TIME_TAG; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 184 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = UINT64_TAG; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 185 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = UINT32_TAG; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 186 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = UINT16_TAG; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 187 "ml.l"
{ BEGIN ATTRIBUTE; return type_state = UINT8_TAG; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 189 "ml.l"
{ return MESSAGE_END; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 190 "ml.l"
{ BEGIN COMMENT; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 191 "ml.l"
{ return yytext[0]; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 192 "ml.l"
{ BEGIN COMMENT; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 193 "ml.l"
{ BEGIN COMMENT; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 194 "ml.l"
{ BEGIN COMMENT; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 195 "ml.l"
ECHO;
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ATTRIBUTE):
case YY_STATE_EOF(VALUE):
case YY_STATE_EOF(BOOL):
case YY_STATE_EOF(SIMPLE):
case YY_STATE_EOF(STRBODY):
case YY_STATE_EOF(RAWBODY):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 326 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 326 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 325);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 195 "ml.l"


